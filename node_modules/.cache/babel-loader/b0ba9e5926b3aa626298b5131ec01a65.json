{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.default = void 0;\n\nvar _react = _interopRequireDefault(require(\"react\"));\n\nvar _propTypes = _interopRequireDefault(require(\"prop-types\"));\n\nvar _semanticUiReact = require(\"semantic-ui-react\");\n\nvar _lib = require(\"../lib\");\n\nfunction _interopRequireDefault(obj) {\n  return obj && obj.__esModule ? obj : {\n    default: obj\n  };\n}\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n\nvar popupStyle = {\n  padding: '0',\n  filter: 'none' // prevents bluring popup when used inside Modal with dimmer=\"bluring\" #28 #26\n\n};\n\nfunction InputView(props) {\n  var popupPosition = props.popupPosition,\n      inline = props.inline,\n      value = props.value,\n      closeOnMouseLeave = props.closeOnMouseLeave,\n      onChange = props.onChange,\n      inlineLabel = props.inlineLabel,\n      popupIsClosed = props.popupIsClosed,\n      onPopupUnmount = props.onPopupUnmount,\n      mountNode = props.mountNode;\n  var rest = (0, _lib.getUnhandledProps)(InputView, props);\n\n  var inputElement = _react.default.createElement(_semanticUiReact.Form.Input, _extends({}, rest, {\n    value: value,\n    inline: inlineLabel,\n    onChange: onChange\n  }));\n\n  if (inline) return props.children;\n  return _react.default.createElement(_semanticUiReact.Popup, {\n    position: popupPosition,\n    open: popupIsClosed ? false : undefined,\n    trigger: inputElement,\n    hoverable: closeOnMouseLeave,\n    flowing: true,\n    mountNode: mountNode,\n    onUnmount: onPopupUnmount,\n    style: popupStyle,\n    hideOnScroll: true,\n    on: \"click\"\n  }, props.children);\n}\n\nInputView.handledProps = [\"children\", \"closeOnMouseLeave\", \"inline\", \"inlineLabel\", \"mountNode\", \"onChange\", \"onPopupUnmount\", \"popupIsClosed\", \"popupPosition\", \"value\"];\nInputView.propTypes = {\n  /** Whether to display inline picker or picker inside a popup. */\n  inline: _propTypes.default.bool,\n\n  /** Where to display popup. */\n  popupPosition: _propTypes.default.string,\n\n  /** Currently selected value. */\n  value: _propTypes.default.string,\n\n  /** Whether to close a popup when cursor leaves it. */\n  closeOnMouseLeave: _propTypes.default.bool,\n\n  /** Called after input field value has changed. */\n  onChange: _propTypes.default.func,\n\n  /** Picker. */\n  children: _propTypes.default.node,\n\n  /** A field can have its label next to instead of above it. */\n  inlineLabel: _propTypes.default.bool,\n\n  /** Whether popup is closed. */\n  popupIsClosed: _propTypes.default.bool,\n\n  /** Called when popup is forsed to close. */\n  onPopupUnmount: _propTypes.default.func,\n\n  /** The node where the picker should mount. */\n  mountNode: _propTypes.default.any\n};\nInputView.defaultProps = {\n  inline: false,\n  closeOnMouseLeave: true\n};\nvar _default = InputView;\nexports.default = _default;","map":null,"metadata":{},"sourceType":"script"}