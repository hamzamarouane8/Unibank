{"ast":null,"code":"import _taggedTemplateLiteral from \"C:\\\\Users\\\\DIT\\\\Desktop\\\\Nouveau dossier (4)\\\\unibank-web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/taggedTemplateLiteral\";\nimport _objectSpread from \"C:\\\\Users\\\\DIT\\\\Desktop\\\\Nouveau dossier (4)\\\\unibank-web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/objectSpread\";\nimport _classCallCheck from \"C:\\\\Users\\\\DIT\\\\Desktop\\\\Nouveau dossier (4)\\\\unibank-web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"C:\\\\Users\\\\DIT\\\\Desktop\\\\Nouveau dossier (4)\\\\unibank-web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"C:\\\\Users\\\\DIT\\\\Desktop\\\\Nouveau dossier (4)\\\\unibank-web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"C:\\\\Users\\\\DIT\\\\Desktop\\\\Nouveau dossier (4)\\\\unibank-web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"C:\\\\Users\\\\DIT\\\\Desktop\\\\Nouveau dossier (4)\\\\unibank-web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _defineProperty from \"C:\\\\Users\\\\DIT\\\\Desktop\\\\Nouveau dossier (4)\\\\unibank-web\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/defineProperty\";\n\nvar _rib,\n    _jsxFileName = \"C:\\\\Users\\\\DIT\\\\Desktop\\\\Nouveau dossier (4)\\\\unibank-web\\\\src\\\\containers\\\\BeneficiaireForm.js\";\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n  .field .dropdown{\\n    background: #FFF;\\n    border-radius: 20px;\\n  }\\n.field .ui input{\\n    background: none ;\\n    border:0;\\n    border-bottom: 1px solid #e1dfe4;\\n\\n  }\\n  \\n\"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React from 'react';\nimport Form from '../component/form';\nimport moment from 'moment';\nimport styled from 'react-emotion';\nimport isEmpty from 'lodash/isEmpty';\nimport find from 'lodash/find';\n\nvar mapOptions = function mapOptions(data) {\n  return (data || []).map(function (item) {\n    return {\n      key: item.id,\n      value: item.label,\n      text: item.label\n    };\n  });\n};\n\nvar rib = (_rib = {\n  type: 'text',\n  label: 'RIB',\n  required: true,\n  maxString: true\n}, _defineProperty(_rib, \"maxString\", true), _defineProperty(_rib, \"errorMessage\", \"votre Rib n'est pas valide\"), _defineProperty(_rib, \"errorCondition\", 24), _rib);\nvar numAccount = {\n  type: 'text',\n  label: 'numéro de compte',\n  required: true\n};\nvar fName = {\n  type: 'text',\n  label: 'Nom du bénéficiaire',\n  required: true,\n  maxString: true,\n  errorMessage: \"votre Prenom n'est pas valide\",\n  errorCondition: 100\n};\nvar lName = {\n  type: 'text',\n  label: 'Prénom du bénéficiaire',\n  required: true,\n  maxString: true,\n  errorMessage: \"votre Nom n'est pas valide\",\n  errorCondition: 100\n};\nvar raison = {\n  type: 'text',\n  label: 'Raison Sociale',\n  required: true,\n  maxString: true,\n  errorMessage: \"votre Raison Sociale n'est pas valide\",\n  errorCondition: 100\n};\nvar fieldsSgPhysique = {\n  fname: fName,\n  lname: lName,\n  numAccount: numAccount\n};\nvar fieldsSgMorale = {\n  raison: raison,\n  numAccount: numAccount\n};\nvar fieldsPhysique = {\n  fname: fName,\n  lname: lName,\n  rib: rib\n};\nvar fieldsMorale = {\n  raison: raison,\n  rib: rib\n};\nvar listTypeBeneficiary = [{\n  id: 1,\n  type: \"morale\",\n  label: \"Personne Morale\"\n}, {\n  id: 2,\n  type: \"physique\",\n  label: \"Personne Physique\"\n}];\n\nvar VirementForm =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(VirementForm, _React$Component);\n\n  function VirementForm(props) {\n    var _this;\n\n    _classCallCheck(this, VirementForm);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(VirementForm).call(this, props));\n    _this.state = {\n      beneficiaires: [],\n      errors: null,\n      typeBeneficiary: true,\n      // physique\n      toggle: false\n    };\n    return _this;\n  }\n\n  _createClass(VirementForm, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.setState({\n        beneficiaires: this.props.data\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Design, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 44\n        },\n        __self: this\n      }, this.state.typeBeneficiary && this.state.toggle && React.createElement(Form //formPhysiqueSg\n      , {\n        fields: _objectSpread({\n          typeBeneficiary: {\n            type: 'select',\n            initvalue: this.state.typeBeneficiary ? listTypeBeneficiary[1].label : listTypeBeneficiary[0].label,\n            required: true,\n            label: 'Type Bénéficiaire',\n            options: mapOptions(listTypeBeneficiary),\n            onChange: function onChange(value) {\n              _this2.setState({\n                typeBeneficiary: value === 'Personne Physique' ? true : false\n              });\n            }\n          },\n          toggleSG: {\n            type: 'toggle',\n            initvalue: this.state.toggle,\n            required: true,\n            label: 'Client SG',\n            onChange: function onChange(value) {\n              _this2.setState({\n                toggle: value\n              });\n            }\n          }\n        }, fieldsSgPhysique),\n        buttons: {\n          submit: {\n            label: 'Valider'\n          },\n          return: {\n            label: 'Retour',\n            onClick: function onClick() {\n              _this2.props.retour();\n            }\n          }\n        },\n        initialValues: {\n          typeBeneficiary: this.state.typeBeneficiary ? listTypeBeneficiary[1].label : listTypeBeneficiary[0].label,\n          toggleSG: this.state.toggle\n        },\n        submitText: \"Valider\",\n        onSubmit: this.props.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 46\n        },\n        __self: this\n      }), this.state.typeBeneficiary && !this.state.toggle && React.createElement(Form //formPhysique\n      , {\n        fields: _objectSpread({\n          typeBeneficiary: {\n            type: 'select',\n            required: true,\n            initvalue: this.state.typeBeneficiary ? listTypeBeneficiary[1].label : listTypeBeneficiary[0].label,\n            label: 'Type Bénéficiaire',\n            options: mapOptions(listTypeBeneficiary),\n            onChange: function onChange(value) {\n              _this2.setState({\n                typeBeneficiary: value === 'Personne Physique' ? true : false\n              });\n            }\n          },\n          toggleSG: {\n            type: 'toggle',\n            initvalue: this.state.toggle,\n            required: true,\n            label: 'Client SG',\n            onChange: function onChange(value) {\n              _this2.setState({\n                toggle: value\n              });\n            }\n          }\n        }, fieldsPhysique),\n        buttons: {\n          submit: {\n            label: 'Valider'\n          },\n          return: {\n            label: 'Retour',\n            onClick: function onClick() {\n              _this2.props.retour();\n            }\n          }\n        },\n        initialValues: {\n          typeBeneficiary: this.state.typeBeneficiary ? listTypeBeneficiary[1].label : listTypeBeneficiary[0].label,\n          toggleSG: this.state.toggle\n        },\n        submitText: \"Valider\",\n        onSubmit: this.props.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 77\n        },\n        __self: this\n      }), !this.state.typeBeneficiary && this.state.toggle && React.createElement(Form //formMoraleSg\n      , {\n        fields: _objectSpread({\n          typeBeneficiary: {\n            type: 'select',\n            required: true,\n            initvalue: this.state.typeBeneficiary ? listTypeBeneficiary[1].label : listTypeBeneficiary[0].label,\n            label: 'Type Bénéficiaire',\n            options: mapOptions(listTypeBeneficiary),\n            onChange: function onChange(value) {\n              _this2.setState({\n                typeBeneficiary: value === 'Personne Physique' ? true : false\n              });\n            }\n          },\n          toggleSG: {\n            type: 'toggle',\n            required: true,\n            initvalue: this.state.toggle,\n            label: 'Client SG',\n            onChange: function onChange(value) {\n              _this2.setState({\n                toggle: value\n              });\n            }\n          }\n        }, fieldsSgMorale),\n        buttons: {\n          submit: {\n            label: 'Valider'\n          },\n          return: {\n            label: 'Retour',\n            onClick: function onClick() {\n              _this2.props.retour();\n            }\n          }\n        },\n        initialValues: {\n          typeBeneficiary: this.state.typeBeneficiary ? listTypeBeneficiary[1].label : listTypeBeneficiary[0].label,\n          toggleSG: this.state.toggle\n        },\n        submitText: \"Valider\",\n        onSubmit: this.props.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }), !this.state.typeBeneficiary && !this.state.toggle && React.createElement(Form //formMoral\n      , {\n        fields: _objectSpread({\n          typeBeneficiary: {\n            type: 'select',\n            required: true,\n            initvalue: this.state.typeBeneficiary ? listTypeBeneficiary[1].label : listTypeBeneficiary[0].label,\n            label: 'Type Bénéficiaire',\n            options: mapOptions(listTypeBeneficiary),\n            onChange: function onChange(value) {\n              _this2.setState({\n                typeBeneficiary: value === 'Personne Physique' ? true : false\n              });\n            }\n          },\n          toggleSG: {\n            type: 'toggle',\n            required: true,\n            initvalue: this.state.toggle,\n            label: 'Client SG',\n            onChange: function onChange(value) {\n              _this2.setState({\n                toggle: value\n              });\n            }\n          }\n        }, fieldsMorale),\n        buttons: {\n          submit: {\n            label: 'Valider'\n          },\n          return: {\n            label: 'Retour',\n            onClick: function onClick() {\n              _this2.props.retour();\n            }\n          }\n        },\n        initialValues: {\n          typeBeneficiary: this.state.typeBeneficiary ? listTypeBeneficiary[1].label : listTypeBeneficiary[0].label,\n          toggleSG: this.state.toggle\n        },\n        submitText: \"Valider\",\n        onSubmit: this.props.onSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return VirementForm;\n}(React.Component);\n\nexport default VirementForm;\nvar Design = styled('div')(_templateObject());","map":{"version":3,"sources":["C:\\Users\\DIT\\Desktop\\Nouveau dossier (4)\\unibank-web\\src\\containers\\BeneficiaireForm.js"],"names":["React","Form","moment","styled","isEmpty","find","mapOptions","data","map","item","key","id","value","label","text","rib","type","required","maxString","numAccount","fName","errorMessage","errorCondition","lName","raison","fieldsSgPhysique","fname","lname","fieldsSgMorale","fieldsPhysique","fieldsMorale","listTypeBeneficiary","VirementForm","props","state","beneficiaires","errors","typeBeneficiary","toggle","setState","initvalue","options","onChange","toggleSG","submit","return","onClick","retour","onSubmit","Component","Design"],"mappings":"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","sourcesContent":["import React from 'react';\nimport Form from '../component/form';\nimport moment from 'moment'\nimport styled from 'react-emotion'\nimport isEmpty from 'lodash/isEmpty'\nimport find from 'lodash/find'\n\nconst mapOptions = (data) => {\n  return (data || []).map((item) => ({key: item.id, value: item.label, text:item.label}))\n}\nvar rib ={type: 'text', label: 'RIB', required: true,maxString:true, maxString :true,errorMessage:\"votre Rib n'est pas valide\",errorCondition:24};\nvar numAccount = {type: 'text', label: 'numéro de compte', required: true}\nvar fName= {type: 'text', label: 'Nom du bénéficiaire', required: true,maxString :true,errorMessage:\"votre Prenom n'est pas valide\",errorCondition:100}\nvar lName = {type: 'text', label: 'Prénom du bénéficiaire', required: true,maxString :true,errorMessage:\"votre Nom n'est pas valide\",errorCondition:100}\nvar raison = {type: 'text', label: 'Raison Sociale', required: true, maxString :true,errorMessage:\"votre Raison Sociale n'est pas valide\",errorCondition:100}\n\n\nlet fieldsSgPhysique={fname:fName,lname:lName,numAccount:numAccount}\nlet fieldsSgMorale={raison:raison,numAccount:numAccount}\nlet fieldsPhysique={fname:fName,lname:lName,rib:rib}\nlet fieldsMorale={raison:raison,rib:rib}\n\nlet listTypeBeneficiary=[{id:1,type:\"morale\",label:\"Personne Morale\"},{id:2,type:\"physique\",label:\"Personne Physique\"}]\nclass VirementForm extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      beneficiaires: [],\n      errors: null,\n      typeBeneficiary:true, // physique\n      toggle:false,\n    }\n  }\n\n  componentDidMount() {\n    this.setState({\n      beneficiaires: this.props.data,\n\n  })\n}\n\nrender() {\n  return (\n    <Design>\n      {this.state.typeBeneficiary && this.state.toggle &&\n      <Form\n        //formPhysiqueSg\n        fields ={{\n          typeBeneficiary: {\n            type: 'select',\n            initvalue:this.state.typeBeneficiary ? listTypeBeneficiary[1].label:listTypeBeneficiary[0].label,\n            required: true,\n            label: 'Type Bénéficiaire',\n            options:mapOptions(listTypeBeneficiary),\n            onChange: (value) => {this.setState({typeBeneficiary:value==='Personne Physique'?true:false})}\n          },\n          toggleSG: {\n            type: 'toggle',\n            initvalue:this.state.toggle,\n            required: true,\n            label: 'Client SG',\n            onChange :(value) =>{this.setState({toggle: value})}\n            },\n          ...fieldsSgPhysique\n\n        }}\n\n        buttons={{\n          submit: { label: 'Valider'},\n          return: { label: 'Retour',onClick:()=>{this.props.retour()}}\n        }}\n        initialValues={{typeBeneficiary:this.state.typeBeneficiary?listTypeBeneficiary[1].label:listTypeBeneficiary[0].label,toggleSG:this.state.toggle}}\n        submitText=\"Valider\"\n        onSubmit={this.props.onSubmit}\n      />\n      }\n      {this.state.typeBeneficiary && !this.state.toggle && <Form\n        //formPhysique\n        fields ={{\n          typeBeneficiary: {\n            type: 'select',\n            required: true,\n            initvalue:this.state.typeBeneficiary ? listTypeBeneficiary[1].label:listTypeBeneficiary[0].label,\n            label: 'Type Bénéficiaire',\n            options:mapOptions(listTypeBeneficiary),\n            onChange: (value) => {\n              this.setState({typeBeneficiary:value==='Personne Physique'?true:false})}\n          },\n          toggleSG: {\n            type: 'toggle',\n            initvalue:this.state.toggle,\n            required: true,\n            label: 'Client SG',\n            onChange :(value) =>{\n              this.setState({toggle: value})}\n          },\n          ...fieldsPhysique\n        }}\n        buttons={{\n          submit: { label: 'Valider'},\n          return: { label: 'Retour',onClick:()=>{this.props.retour()}}\n        }\n        }\n        initialValues={{typeBeneficiary:this.state.typeBeneficiary?listTypeBeneficiary[1].label:listTypeBeneficiary[0].label,toggleSG:this.state.toggle}}\n        submitText=\"Valider\"\n        onSubmit={this.props.onSubmit}\n      />}\n      {!this.state.typeBeneficiary && this.state.toggle &&<Form\n        //formMoraleSg\n        fields ={{\n          typeBeneficiary: {\n            type: 'select',\n            required: true,\n            initvalue:this.state.typeBeneficiary ? listTypeBeneficiary[1].label:listTypeBeneficiary[0].label,\n            label: 'Type Bénéficiaire',\n            options:mapOptions(listTypeBeneficiary),\n            onChange: (value) => {this.setState({typeBeneficiary:value==='Personne Physique'?true:false})\n            }\n          },\n          toggleSG: {\n            type: 'toggle',\n            required: true,\n            initvalue:this.state.toggle,\n            label: 'Client SG',\n            onChange :(value) =>{this.setState({toggle: value})}\n          },\n          ...fieldsSgMorale\n        }}\n        buttons={{\n          submit: { label: 'Valider'},\n          return: { label: 'Retour',onClick:()=>{this.props.retour()}}\n        }}\n        initialValues={{typeBeneficiary:this.state.typeBeneficiary?listTypeBeneficiary[1].label:listTypeBeneficiary[0].label,toggleSG:this.state.toggle}}\n        submitText=\"Valider\"\n        onSubmit={this.props.onSubmit}\n      />}\n      {!this.state.typeBeneficiary && !this.state.toggle &&<Form\n        //formMoral\n        fields ={{\n          typeBeneficiary: {\n            type: 'select',\n            required: true,\n            initvalue:this.state.typeBeneficiary ? listTypeBeneficiary[1].label:listTypeBeneficiary[0].label,\n            label: 'Type Bénéficiaire',\n            options:mapOptions(listTypeBeneficiary),\n            onChange: (value) => {this.setState({typeBeneficiary:value==='Personne Physique'?true:false})}\n          },\n          toggleSG: {\n            type: 'toggle',\n            required: true,\n            initvalue:this.state.toggle,\n            label: 'Client SG',\n            onChange :(value) =>{this.setState({toggle: value})}\n          },\n          ...fieldsMorale\n        }}\n        buttons={{\n          submit: { label: 'Valider'},\n          return: { label: 'Retour',onClick:()=>{this.props.retour()}}\n        }}\n        initialValues={{typeBeneficiary:this.state.typeBeneficiary?listTypeBeneficiary[1].label:listTypeBeneficiary[0].label,toggleSG:this.state.toggle}}\n        submitText=\"Valider\"\n        onSubmit={this.props.onSubmit}\n      />}\n\n\n\n    </Design>\n    );\n  }\n}\n\nexport default VirementForm;\nconst Design = styled('div')`\n  .field .dropdown{\n    background: #FFF;\n    border-radius: 20px;\n  }\n.field .ui input{\n    background: none ;\n    border:0;\n    border-bottom: 1px solid #e1dfe4;\n\n  }\n  \n`\n"]},"metadata":{},"sourceType":"module"}