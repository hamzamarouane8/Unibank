"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _lodash = _interopRequireDefault(require("lodash"));

var _Calendar = _interopRequireDefault(require("./Calendar"));

var _Header = _interopRequireDefault(require("./CalendarHeader/Header"));

var _Body = _interopRequireDefault(require("./CalendarBody/Body"));

var _DayView = require("./DayView");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var DAY_POSITIONS = _lodash.default.range(_DayView.WEEKS_TO_DISPLAY * 7);

function getActive(start, end) {
  if (_lodash.default.isNil(start) && _lodash.default.isNil(end)) return;

  if (!_lodash.default.isNil(start) && _lodash.default.isNil(end)) {
    return start;
  }

  if (!_lodash.default.isNil(start) && !_lodash.default.isNil(end)) {
    return DAY_POSITIONS.slice(start, end + 1);
  }
}

function DatesRangeView(props) {
  var days = props.days,
      onNextPageBtnClick = props.onNextPageBtnClick,
      onPrevPageBtnClick = props.onPrevPageBtnClick,
      onDayClick = props.onDayClick,
      hasPrevPage = props.hasPrevPage,
      hasNextPage = props.hasNextPage,
      currentDate = props.currentDate,
      onHeaderClick = props.onHeaderClick,
      active = props.active,
      disabled = props.disabled,
      selectedRange = props.selectedRange;
  var start = active.start,
      end = active.end;
  return _react.default.createElement(_Calendar.default, null, _react.default.createElement(_Header.default, {
    width: _DayView.DAY_CALENDAR_ROW_WIDTH,
    displayWeeks: true,
    rangeRowContent: selectedRange,
    onNextPageBtnClick: onNextPageBtnClick,
    onPrevPageBtnClick: onPrevPageBtnClick,
    hasNextPage: hasNextPage,
    hasPrevPage: hasPrevPage,
    title: currentDate,
    onHeaderClick: onHeaderClick
  }), _react.default.createElement(_Body.default, {
    width: _DayView.DAY_CALENDAR_ROW_WIDTH,
    data: days,
    onCellClick: onDayClick,
    active: getActive(start, end),
    disabled: disabled
  }));
}

DatesRangeView.handledProps = ["active", "currentDate", "days", "disabled", "hasNextPage", "hasPrevPage", "onDayClick", "onHeaderClick", "onNextPageBtnClick", "onPrevPageBtnClick", "selectedRange"];
DatesRangeView.propTypes = {
  /** An array of dates to fill a calendar with. */
  days: _propTypes.default.arrayOf(_propTypes.default.string).isRequired,

  /** Called after click on next page button. */
  onNextPageBtnClick: _propTypes.default.func.isRequired,

  /** Called after click on previous page button. */
  onPrevPageBtnClick: _propTypes.default.func.isRequired,

  /** Called after click on day. */
  onDayClick: _propTypes.default.func.isRequired,

  /** Whether to display previous page button as active or disabled. */
  hasPrevPage: _propTypes.default.bool.isRequired,

  /** Whether to display next page button as active or disabled. */
  hasNextPage: _propTypes.default.bool.isRequired,

  /** Date that is displayed in calendar header. */
  currentDate: _propTypes.default.string.isRequired,

  /** Selected range that is displayed in calendar header. */
  selectedRange: _propTypes.default.string.isRequired,

  /** Start and end of a range of day positions to display as active. */
  active: _propTypes.default.shape({
    start: _propTypes.default.number,
    end: _propTypes.default.number
  }).isRequired,

  /** Called after click on calendar header. */
  onHeaderClick: _propTypes.default.func,

  /** An array of day positions to display as disabled. */
  disabled: _propTypes.default.arrayOf(_propTypes.default.number)
};
DatesRangeView.defaultProps = {
  active: {
    start: undefined,
    end: undefined
  }
};
var _default = DatesRangeView;
exports.default = _default;